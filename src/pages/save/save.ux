<template>
	<div class="container">
		<!-- 感谢Charlie_Q提供的弧形时间,由OrPudding移植圆表 -->
		<div class="header" @click="backToHome">
			<text class="time time1">{{ time[0] }}</text>
			<text class="time time2">{{ time[1] }}</text>
			<text class="time time3">{{ ":" }}</text>
			<text class="time time4">{{ time[2] }}</text>
			<text class="time time5">{{ time[3] }}</text>
			<text class="pagetitle">{{ title }}</text>
		</div>
		<div class="save-section">
			<div class="save-item" for="{{ saveSlots.slice(1) }}">
				<div class="save-header">
					<div style="flex-direction: row; justify-content: space-between">
						<text class="save-title">存档{{ $idx + 1 }}</text>
					</div>
					<div class="save-time">
						<text class="save-date">
							{{ $item.time ? $item.time.split(" ")[0] : "空存档" }}
						</text>
						<text class="save-time-part">
							{{ $item.time ? $item.time.split(" ")[1] : "" }}
						</text>
					</div>
				</div>
				<div class="save-actions">
					<text class="delete-btn" onclick="deleteSaveSlot($idx + 1)">
						删除
					</text>
					<text class="load-btn" onclick="loadFromSlot($idx + 1)">加载</text>
					<text class="backup-btn" onclick="notAvailable($idx + 1)">备份</text>
				</div>
			</div>
		</div>
	</div>
</template>

<script>
import router from "@system.router";
import storage from "@system.storage";
import prompt from "@system.prompt";
import interconnect from "@system.interconnect";

export default {
	private: {
		title: "存档管理",
		time: [0, 0, 0, 0],
		timer: null,
		saveSlots: new Array(5).fill({ time: "" }), // 初始化5个存档位
	},

	onInit() {
		this.loadSaveSlots();
		this.updateTime();
		this.timer = setInterval(() => this.updateTime(), 1000);
	},

	notAvailable() {
		prompt.showToast({
			message: "后续将支持备份存档到远端AstroBox插件，敬请期待",
		});
	},

	handleBackup(index) {
		const connect = interconnect.instance();
		connect.getReadyState({
			success: (data) => {
				if (data.status !== 1) {
					prompt.showToast({ message: "请先连接远端AstroBox插件" });
					return;
				}

				if (!this.saveSlots[index].time) {
					// 空存档时请求数据
					connect.send({
						data: { type: "request_save", index },
						success: () => this.onBackupMessage(index),
					});
				} else {
					// 非空存档直接备份
					this.backupSaveData(index, connect);
				}
			},
			fail: () => prompt.showToast({ message: "连接检查失败" }),
		});
	},

	onBackupMessage(index) {
		const connect = interconnect.instance();
		connect.onmessage = (data) => {
			if (data.type === "save_response") {
				storage.set({
					key: this.getSlotKey(index),
					value: JSON.stringify(data),
					success: () => {
						this.saveSlots[index] = data;
						prompt.showToast({ message: `存档${index}已从远端恢复` });
					},
				});
			}
		};
	},

	backupSaveData(index, connect) {
		storage.get({
			key: this.getSlotKey(index),
			success: (saveData) => {
				connect.send({
					data: {
						type: "backup",
						index,
						data: saveData,
					},
					success: () => prompt.showToast({ message: `存档${index}备份成功` }),
					fail: (err) => prompt.showToast({ message: `备份失败: ${err.data}` }),
				});
			},
		});
	},

	// 从engine.ux迁移过来的方法
	loadSaveSlots() {
		this.saveSlots.forEach((_, index) => {
			storage.get({
				key: this.getSlotKey(index),
				success: (data) => {
					if (data) {
						this.saveSlots[index] = JSON.parse(data);
					}
				},
			});
		});
	},

	getSlotKey(index) {
		return `save_slot_${index}`;
	},

	loadFromSlot(index) {
		router.replace({
			uri: "pages/engine",
			params: { loadSlot: index },
		});
	},

	deleteSaveSlot(index) {
		storage.delete({
			key: this.getSlotKey(index),
			success: () => {
				this.saveSlots[index] = { time: "" };
				prompt.showToast({ message: `存档${index}已删除` });
			},
		});
	},
	updateTime() {
		const now = new Date();
		const hours = now.getHours().toString().padStart(2, "0");
		const minutes = now.getMinutes().toString().padStart(2, "0");

		// 更新为index页的时间处理逻辑
		this.time = [
			hours[0], // 小时十位
			hours[1], // 小时个位
			minutes[0], // 分钟十位
			minutes[1], // 分钟个位
		];
	},

	backToHome() {
		router.replace({
			uri: "pages/index",
		});
	},
};
</script>

<style>
@import "../../common/comm.css";
.save-section {
	flex-direction: column;
	margin-top: 100px;
}

.save-item {
	flex-direction: column;
	padding: 8px 8px 14px 8px;
	width: 324px;
	border: 3px solid rgba(255, 255, 255, 0.06);
	background-color: rgba(255, 255, 255, 0.09);
	border-radius: 24px;
}

.save-header {
	justify-content: space-between;
	padding: 0 10px;
	margin-bottom: 8px;
}

.save-title {
	font-size: 28px;
	font-weight: bold;
	color: #fff;
}

.save-time {
	flex-direction: column;
}

.save-date {
	font-size: 20px;
	color: #999;
}

.save-time-part {
	font-size: 20px;
	color: #999;
}

.save-actions {
	flex-direction: row;
	justify-content: space-around;
}

.backup-btn,
.load-btn,
.delete-btn {
	padding: 8px 15px;
	border-radius: 16px;
	font-size: 24px;
	color: #fff;
	border: 3px solid rgba(255, 255, 255, 0.06);
	background-color: rgba(255, 255, 255, 0.07);
}

.backup-btn {
	color: #2ecc71;
}

.load-btn {
	color: #3498db;
}

.delete-btn {
	color: #e74c3c;
}
/* 圆形设备样式 */
@media (shape: circle) {
	.container {
		padding-bottom: 60px;
	}
	.save-item {
		margin-bottom: 20px;
	}
}

/* 矩形设备样式 */
@media (shape: rect) {
	.save-section {
		margin-top: 6px;
	}
	.save-item {
		margin-bottom: 10px;
		width: 316px;
	}
}

/* 药丸形设备样式 */
@media (shape: pill-shaped) {
	.container {
		padding-bottom: 60px;
	}
	.save-section {
		margin-top: 6px;
	}
	.save-item {
		width: 192px;
		margin-top: 5px;
	}
	.save-header {
		flex-direction: column;
	}
	.save-actions {
		flex-wrap: wrap;
	}
	.backup-btn,
	.load-btn,
	.delete-btn {
		margin: 0.5px;
	}
}
</style>
